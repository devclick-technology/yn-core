<?php

namespace YouNegotiate\Models;

use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasOne;
use YouNegotiate\Traits\CompanyIDTrait;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use YouNegotiate\Models\Interfaces\ISubclient;

class Subclient extends Model implements ISubclient
{
    use SoftDeletes, CompanyIDTrait, HasFactory;

    protected $guarded = ['id', 'created_at', 'updated_at', 'deleted_at', 'company_id'];

    public function setDefaultPaymentAccountAttribute($value)
    {
        $this->attributes['default_payment_account'] = ($value == 'true');
    }

    public function getNameAttribute()
    {
        return $this->subclient_name;
    }

    public function getTypeAttribute()
    {
        return $this->subclient_type;
    }

    public function term()
    {
        return $this->only(['id', 'pif_balance_discount_percent', 'ppa_balance_discount_percent', 'min_monthly_pay_percent', 'max_days_first_pay']);
    }

    public function parent(): BelongsTo
    {
        return $this->belongsTo(Subclient::class, 'parent_id', 'id')->withDefault();
    }

    public function merchant(): HasOne
    {
        return $this->hasOne(Merchant::class, 'company_id', 'company_id')->where('subclient_id', $this->id)->withDefault(['merchant_name' => '']);
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function ($object) {
            $object->company_id = auth()->user()->company_id;
        });
    }
}
